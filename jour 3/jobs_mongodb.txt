# Job 1 : Installer MongoDB et vérifier l'installation
# (À faire une seule fois sur ta machine)
# Télécharger MongoDB depuis https://www.mongodb.com/try/download/community
# Installer puis lancer le service MongoDB
# Vérifier l'installation dans le terminal :
mongosh --version

# Job 2 : Lancer le shell MongoDB (mongosh)
# Ouvre un terminal et tape :
mongosh
# Tu es maintenant connecté à MongoDB et prêt à exécuter les commandes suivantes.

# Commandes MongoDB pour tous les jobs

## Job 3 : Créer la base de données et la collection product
use shop
db.product.insertOne({
  name: "chaussure",
  description: "une paire de chaussures",
  price: 35,
  quantity: 120
})

## Job 4 : Ajouter deux produits
db.product.insertMany([
  { name: "Pantalon noir", description: "Un pantalon noir", price: 14.99, quantity: 12 },
  { name: "chaussettes", description: "chaussettes cool !", price: 6, quantity: 6 }
])

## Job 5 : Créer la collection category et insérer 3 catégories
db.category.insertMany([
  { name: "Chaussures" },
  { name: "Pantalons" },
  { name: "Accessoires" }
])

## Job 6 : Afficher toutes les collections
show collections

## Job 7 : Récupérer toutes les catégories
db.category.find()

## Job 8 : Afficher seulement deux catégories
db.category.find().limit(2)

## Job 9 : Produits par prix croissant
db.product.find().sort({ price: 1 })

## Job 10 : Produits par prix décroissant
db.product.find().sort({ price: -1 })

## Job 11 : Produits prix > 5 et stock < 100
db.product.find({ price: { $gt: 5 }, quantity: { $lt: 100 } })

## Job 12 : Produits prix > 14.99 ou stock > 100
db.product.find({
  $or: [
    { price: { $gt: 14.99 } },
    { quantity: { $gt: 100 } }
  ]
})

## Job 13 : Tous les produits sans leur id
db.product.find({}, { _id: 0 })

## Job 14 : Récupérer une catégorie par son id
// Remplace VOTRE_ID_ICI par l'id réel
db.category.find({ _id: ObjectId("VOTRE_ID_ICI") })

## Job 15 : Changer le nom de la catégorie “bébé”
db.category.updateOne(
  { name: "bébé" },
  { $set: { name: "Vêtements pour enfant" } }
)

## Créer une catégorie
db.category.insertOne({ name: "NomDeLaCatégorie" })

## Relier produits et catégories (exemple avec tes ids)
db.product.updateOne(
  { name: "chaussure" },
  { $set: { category_id: ObjectId("68528adcdfba1b818e96a339") } }
)
db.product.updateOne(
  { name: "Pantalon noir" },
  { $set: { category_id: ObjectId("68528adcdfba1b818e96a33a") } }
)
db.product.updateOne(
  { name: "chaussettes" },
  { $set: { category_id: ObjectId("68528adcdfba1b818e96a33b") } }
)

## Afficher produits avec leur catégorie
db.product.aggregate([
  {
    $lookup: {
      from: "category",
      localField: "category_id",
      foreignField: "_id",
      as: "category"
    }
  }
])

## Catégorie avec le moins d’articles
db.product.aggregate([
  { $group: { _id: "$category_id", count: { $sum: 1 } } },
  { $sort: { count: 1 } },
  { $limit: 1 },
  {
    $lookup: {
      from: "category",
      localField: "_id",
      foreignField: "_id",
      as: "category"
    }
  },
  { $unwind: "$category" }
])
